NAME
    csvgen

DESCRIPTION
     A command line application that randomly generates values, including mocked 
     address data as CSV (comma separated Values) output.

OPTIONS
    -h ,  --help      : help
    -man, --manual    : manual pages
    -ex,  --examples  : runs and displays examples

FILES
    Files needed for this application to run which contain data used in the CSV 
    generation process. The /Data/US/README.txt contains information about
    how and where the data was collected.

    /data
            all.last.txt         see data_read_me.txt - all last names
            cities.txt           city, state and gps information
            female.first.txt     see data_read_me.txt - female first names
            male.first.txt       see data_read_me.txt - male first names
            places.txt           U.S.A. Places (city, state, count, and aliases)
            suffixes.txt         USPS common delivery line street and place 
                                 suffixes with variants
            zip.codes.txt        USPS postal and gps information:
                                 see data_read_me.txt file.
            words.txt            word and word meta data: List of English words


ENVIRONMENT
    This application is written for python 3.6 or higher and will run on any python supported operating
    system with the correct python 3.6 requirements.

AUTHOR
    Adam York
    web    : https://www.adamyork.com
    email  : adam@adamyork.com
    twitter: https://twitter.com/GreatAdamYork
    git hub: https://github.com/yorkadam


LIST OF COMMANDS (commands are case-sensitive)

     -GetRandomAlpha    :[c or f] [count] [delimiter]
     -GetRandomNumeric  :[c or f] [count] [delimiter] [start] [end]
     -GetStaticSequence :[c or f] [identifier] [is_prefix] [start] [end] [delimiter] [joiner] [alpha_indicator]
     -GetRandomSequence :[c or f] [is_prefix] [start] [end] [delimiter] [joiner] [alpha_indicator]
     -GetAddresses      :[c or f] [is_filtered] [count] [address_type] [include_header]

      Definitions:
      c or f           indicates where output is written to; c = console, f = file (output.txt)
      count:           number of records (integer)
      delimiter:       CSV delimiter (character)
      start & end:     start and end of range (integers) which also affect the number of records.
      identifier:      any (character) used as an identifier for field values
      is_prefix:       indicates (bool) if a field value is appended to start of field value otherwise end of value
      is_filtered:     for addresses only, indicates (bool) if field length filtering is applied to field outputs.
      joiner:          (character) used between field value and field value prefix
      alpha_indicator  indicates (bool) usage of alpha value for sequences as opposed to integers
      address_type     type of address formatting template to use (business or standard)
      include_header   (bool) for address, if the header row is included or not in final output


COMMAND FORMAT

     All command parameters must be entered as quoted strings in the form of:

     [-Command Name] "Paramter1" "Parameter2" ...
     Example: -GetRandomAlpha "c" "10" "|"

COMMANDS                 PARAMETERS
     -GetRandomAlpha   | [output to file] [count] [delimiter]
     -GetRandomNumeric | [output to file] [count] [delimiter] [start] [end]

DESCRIPTION
     Creates CSV values as either integers or alpha characters, where characters
     are read from a list of English words.

PARAMETERS
     [output to file]: (c or f )
     Data is either written to the console or to a file
     
     [count]: (integer)
     The number of values to generate
     
     [delimiter]: (character)
     Any character used as a CSV delimiter
     
     [start & end]: (integers)
     An integer indicating the start & end of an integer range

COMMANDS                 PARAMETERS
     -GetStaticSequence | [output to file] [identifier] [is_prefix] [start] [end] [delimiter]
                        | [joiner] [alpha_indicator]
     -GetRandomSequence | [output to file] [is_prefix] [start] [end] [delimiter] [joiner]
                        | [alpha_indicator]

PARAMETERS
     [output to file]: (c or f)
     Data is written to the console or to a file
     
     [identifier]: (string)
     A string value used as the static component of a static sequence 
     For example: A product part number sequenced as a batch
     
     [is_prefix]: (true or false)
     Indicates if the sequence numbering is used as a  prefix or suffix
     
     [start & end]: (integers)
     An integer indicating the start and end of an integer range
     
     [delimiter]: (character)
     Any character used as a CSV delimiter
     
     [joiner]: (character)
     Any character used as a joining character between the identifier value and 
     either the suffix or prefix, depending on which is used.
     
     [alpha_indicator]: (true or false)
     If true: a sequence is created with an alpha sequence indicator 
     instead of an integer.

COMMANDS             PARAMETERS
     -GetAddresses | [output to file] [is_filtered] [count] [address type]
                   | [include_header]

PARAMETERS 
     [output to file]: (c or f)
     Data is written to the console or to a file   
     
     [is_filtered]: (true or false) or (t,f,y,n)
     If true, address fields are filtered by length as set in the template 
     file settings for addresses.
     
     [count]: (integer)
     The number of addresses to return
     
     [address type]: (business or standard)
     The address format template applied to the CSV output.
     Business or standard have varying fields as specified in the address 
     template settings.
     
     [include_header]: (true or false) or (t,f,y,n)
     If true, output will be appended with  address field header.

ADDITIONAL INFORMATION & USE CASE EXAMPLES

RANDOM: (no sequence) [random words or random integers]
     Use Case: 
     Random items without regard or consideration; of item order. 
     
     Using a sentence: 
     The brown fox jumped over the lazy dog.

     Example 1: Jumped brown fox lazy over dog the. 
     (no sequence indicators)

     Example 2: A list of unique words collected regardless of collection 
     order without sequence indicator 
     (no sequence indicators)

     Example 3: 7323, 34, 019201, 23432432432432, 3, 5, 00 
     (any random number based on provided numeric range)
     (no sequence indicators)

RANDOM SEQUENCE: let X be X1,...,Xn  where X is random
     Use Case: 
     Any case were random items are indexed sequentially
     
     Example 1: Jumped1 brown2 fox3 lazy4 over5 dog6 the7.  
                (with sequence indicators)
     Example 2: A list of unique words tagged with a sequence indicator (index)

STATIC SEQUENCE: let X be (X1,... ,Xn ) where X is constant.
     Use Case: Any case where duplicated items are indexed sequentially.
     Example 1: Jumped1, Jumped2,  Jumped3 ... Jumped(n) 
                (with sequence indicator)
     Example 2: A duplicated list of words tagged with a sequence indicator 
                (index).

REAL WORLD APPLICATION

RANDOM:
     A sampling of unique words from a random collection of texts (books)
     or other bodies of textual works.

RANDOM SEQUENCE: 
     A sampling of unique words from a random collection of texts (Books)
     which have been tagged with positional meta-data or sequential index.

STATIC SEQUENCE:
     A manufacture which produces bottled goods where each bottle 
     has the same part number and is stamped with a serial number.

********** EXAMPLES **********

-GetRandomAlpha  outputToFile numberOfValues delimiter
-GetRandomAlpha  "c" "10" "|"
-GetRandomAlpha  "f" "10" "|"

-GetRandomNumeric outputToFile numberOfValues delimiter start end
-GetRandomNumeric  "c" "10" "~" "10" "20"
-GetRandomNumeric  "f" "20" "|" "0"  "50"

-GetStaticSequence outputToFile identifier isPrefix start end delimiter
                  joiner isAlphaIndicator

-GetStaticSequence "c" "PART" "false" "0" "10" "|" "_" "false"
-GetStaticSequence "c" "PART" "false" "0" "10" "|" "_" "true"
-GetStaticSequence "f" "ITEM" "false" "0" "10" "|" "_" "false"
-GetStaticSequence "f" "ITEM" "false" "0" "10" "|" "_" "true"

GetRandomSequence outputToFile isPrefix start end delimiter joiner 
                  isAlphaIndicator

-GetRandomSequence "c" "false" "0" "20" "|" "~" "false"
-GetRandomSequence "c" "true" "0" "20" "|" "~" "true"
-GetRandomSequence "c" "false" "0" "20" "|" "~" "true"
-GetRandomSequence "c" "true" "0" "20" "|" "~" "false"
-GetRandomSequence "f" "false" "0" "20" "|" "~" "false"
-GetRandomSequence "f" "true" "0" "20" "|" "~" "true"
-GetRandomSequence "f" "false" "0" "20" "|" "~" "true"
-GetRandomSequence "f" "true" "0" "20" "|" "~" "false"

GetAddresses outputToFIle isFilteringApplied listLength addressType 
             includeHeader

-GetAddresses "c" "true " "10" "business" "true"
-GetAddresses "c" "false" "10" "business" "false"
-GetAddresses "c" "true " "10" "business" "false"
-GetAddresses "c" "false" "10" "business" "true"
-GetAddresses "f" "true " "10" "business" "true"
-GetAddresses "f" "false" "10" "business" "false"
-GetAddresses "f" "true " "10" "business" "false"
-GetAddresses "f" "false" "10" "business" "true"


********** CONFIGURATION & SETTINGS **********

CONFIGURATION [settings.py]

The configuration of character lengths has the following limitations:
     1. Lengths will not match if raw data is less than specified length.
     2. Lengths may not match if raw data contains additional spaces; 
        adjust accordingly.
     3. Lengths may need to be adjusted when using variants to get expected
        lengths.
     4. Lengths may need to be adjusted if format templates contain spaces.
     5. Lengths affect performance when used in combination with address 
        filtering by lengths.


character_lengths: The number of characters used to specify the character count for each field.

All of the following fields use the [character length].
Suffix has an additional attribute for suffix variants.

     Recipient 
     AddressLine1 
     AddressLine2 
     City 
     State 
     County 
     ZipCode
     DeliveryNumber 
     FirstName
     LastName
     Suffix useVariants "true" or "false"

     Comment:              
     Suffix variants are variations of street suffix contained in the raw data


ITERATIONS [settings.py]

iterations = "X" where X is any single integer value.

Purpose: 

For appending sequential prefixes or suffixes to output values as 
opposed to using integers as prefixes or suffixes.

The number of iterations is specific only to alpha values used as prefixes or 
suffixes.

The number of iterations represent the number of times the application must 
iterate over the alphabet to produce the required number of alpha values.

Iterations produce alpha values similar to the values seen across the top of a 
office spread-sheet for column names. Column A, Column B etc .... Column Z 
for the first iteration. Where the second iteration will produce Column 
AA ... AZ. Each iteration past the first two; continue this pattern. This 
pattern is NOT a spread-sheet pattern as larger number of iterations produce 
different, but consistent, results from common spread-sheet column naming 
conventions.

ITERATION LIMITATIONS
     1. Iterations are recursive; using large numbers cause performance issues
     2. Iterations may be smaller in count than required output count size. 
     
     Note: 
     Users will need to know how many iterations produce enough values for the 
     required output.

     For example: If you produce output that contains 100 values an iteration 
     value of 0 will not be large enough because the first iteration only 
     produces 26 values. Where zero(0) represents the alpha base-line 
     of A to Z as 26 characters.

     To clarify, iterations are zero based where zero (0) represents  the first
     and default iteration of 26 values, one value for each letter A ... Z

ITERATION CALCULATIONS
     The following pattern is used to produce alpha values:

     Variable X = 26 
     Where X represents each of the 26 characters in the English alphabet

     Iteration Count  Breakout
     0            26    X
     1           702    X² + X  
     2          1378   2X² + X
     3          2054   3X² + X
     4          2730   4X² + X
     5          3406   5x² + X
     Note: Choose larger numbers for additional alpha values

WORD STATISTICS / META DATA

Word statistics are used at runtime to provide data set result filtering.
However, not all properties are used at run time. Extra properties
are intended for developers to use within new methods and functions. 
Or for anyone that wants to take a stab at using word meta-data for 
word related projects.

NumberOfCharacters           The total character count of a word.
NumberOfDistinctCharacters   The distinct count of characters within a word.
NumberOfWords                The count of words for words consisting of 
                             multiple words.
NumberOfDistinctWords        The distinct count words for word consisting of 
                             multiple words.
StartCharacter               The starting character of a word.
EndCharacter                 The ending character of a word.
ContainerName                The container; a file name, where the word appears.
ContainerPosition            The position of a word within it's container.
ContainsDuplicateCharacters  True if the word contains duplicate characters.
ContainsDuplicateWords       True if the word is made up multiple words & 
                             contains duplicate words.

Comments: 
While some of the above properties may seem silly; there are in fact cases in 
data driven applications where a word may actually be considered a composition 
of more than one word. In other cases, raw data may contain errors and omissions
and these properties would help identify issues within the data. Also, possibly 
used for data scrubbing.


PERMISSION REQUIREMENTS

The Resources and Output directories must be set for both read and write.
The user account running the application must have sufficient execute 
rights as well as permission to the above directories. This application
if built and deployed correctly should not require any special 
permissions and should run under any standard user account on most
operating systems.


END OF MANUAL
